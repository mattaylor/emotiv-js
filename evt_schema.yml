- title: Updates
  description: Resource updates to any model such as en Headset, EmoUser, Session or Profile, may also trigger events and such event should include the keys and values for whatever properties have been updated eg 'status'
  additonalProperties: true
  properties: 
    _id : { pattern: '\w{3}:\w+\.\d+\+\d+', notes: 'Id of the resource being udpated' }
    status: { type: string, notes: new status on the resource  }
    updated: { type: string, format: iso, notes: Timestamp the update occured  }

- title: Metrics
  description: Cognitive Performance Metrics (Prime Licenses Only) 
  required: [_id]
  definitions: 
    value: &value
      type: integer
      multipleOf: 0.01
      minimum: 0
      maximum: 100
  properties: 
    _id : { pattern: 'met:\w+\.\d+\+\d+', notes: 'met:{session id}+{offset in ms}' }
    foc: *value
    eng: *value
    med: *value
    int: *value
    val: *value
    exc: *value
    str: *value
    rel: *value         

- title: SysLogs
  description: System Logs Messages from SDK 
  required: [_id]
  properties: 
    _id: { pattern: 'sys:\w+\.\d+\+\d+', notes: 'sys:{session id}+{offset in ms}' }
    code:  { type: number }
    level: { enum: [ trace, debug, info, warn, error, fatal ] }
    msg:   { type: string }

- title: Markers
  description: Event Markers Injected Into the EEG Stream
  required: [_id]
  properties: 
    _id: { pattern: 'mar:\w+\.\d+\+\d+', notes: 'mar:{session id}+{offset in ms}' }
    tags: { type: array, items: { type: string } }

- title: Sensors
  description: Sensor Status Events
  required: [_id]
  properties:
    _id:  { pattern: sen:\w+\.\d+\+\d+, notes: 'sen:{session id}+{offset in ms}' }
    cq:  { type: array, items: *value, notes: Contact Quality }
    bat: { type: integer, minimum: 0, maximum: 100, notes: Battery % Level }
    sig: { type: integer, minimum: 0, maximum: 100, notes: Wireless Signal Strength }

- title: PowBands
  description: Bower Band FFT events
  required: [_id]
  properties:
    _id: { pattern: pow:\w+\.\d+\+\d+ , notes: 'pow:{session id}+{offset in ms}' }
    alpha: *value
    betaH: *value
    betaL: *value
    theta: *value
    gamma: *value

- title: EegData
  description: Raw Eeg Readings (Prime or Extra Licenses only)
  required: [_id]
  properties: 
    _id:  { pattern: eeg:\w+\.\d+\+\d+, notes: 'eeg:{session id}+{offset in ms}' }
    raw: { type: array, items: *value  }
 
- title: Facexps
  description: Facial expression events
  required: [_id]
  properties:
    _id: { pattern:  fac:\w+\.\d+\+\d+, notes: 'fac:{session id}+{offset in ms}' }
    uAct: { enum: [frown, suprise] }
    uPow: *value 
    lAct: { enum: [smile, laugh, clench] }
    lPow: *value
    eyes: { enum: [ blink, winkL, winkR, lookU, lookD, lookR, lookL ] }
    
- title: Command
  description: Represents
  required: [_id]
  properties:
    _id: { pattern: com:\w+\.\d+\+\d+, notes: 'com:{session id}+{offset in ms}' }
    act: { type: string, notes: Name of detected command }
    pow: { type: number, notes: Action Power }
 
- title: Motions
  description: Represents
  required: [_id]
  properties:
    _id: { pattern: mot:\w+\.\d+\+\d+, notes: 'mot:{session id}+{offset in ms}' }
    acc: { type: array, items: *value, notes: Accelerometer Readings }

- title: Aggregates
  description: Aggregated Performance Metric Summaries over 10 sec windows.
  required: [_id]
  definitions: 
    stats: &stats 
      type: object
      properties:
        max: *value
        min: *value
        avg: *value
        dev: *value
  properties:
    _id: { pattern: agg:\w+\.\d+\+\d+, notes: 'agg:{session id}+{offset in ms}' }
    num: { type: integer, minimum: 0, maximum: 20,  notes: 'Metric Event Sample count' }
    foc: { $ref: stats } 
    int: { $ref: stats }    
    eng: { $ref: stats }   
    med: { $ref: stats }   
    val: { $ref: stats }    
    rel: { $ref: stats } 
  